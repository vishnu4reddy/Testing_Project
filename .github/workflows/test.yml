name: Test Automation Image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: choice
        required: true
        options:
          - mira
          - polaris
          - pavo
          - hoku
      test_component:
        description: 'Components to run tests with'
        required: true
        default: 'all'
        type: choice
        options:
          - acct_mgmt
          - authz
          - notifications
          - support_assistant
          - ups
          - unified
          - sam
          - all
      marker:
        description: 'The pytest marker to filter tests (e.g., "Plv")'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - Regression
          - Plv

jobs:
  trigger_another_workflow:
    runs-on: ubuntu-latest
    name: Trigger Another Workflow in the Same Repository
    steps:
      - name: Print Current Branch
        run: |
          echo "Current branch: ${{ github.ref }}"
          
      - name: Trigger Another Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: generic-event  # Custom event type to trigger another workflow
          workflow: testing_vishnu.yml  # The workflow to trigger (testing_vishnu.yml)
          ref: ${{ github.ref }}  # Use the same branch/tag for triggering the workflow
          token: ${{ secrets.GT_TOKEN }}  # GitHub token to authorize the action
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "environment": "${{ inputs.environment }}", "test_component": "${{ inputs.test_component }}", "marker": "${{ inputs.marker }}"}'  # Passing inputs as payload

  deploy:
    needs: trigger_another_workflow  # Ensure this job runs only after the previous job completes
    if: ${{ success() }}  # Proceed only if the trigger_another_workflow job was successful
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: |
            echo "Running deploy job"
            COMMIT_SHA="${{ github.sha }}"  # Get the current commit SHA
            docker pull ghcr.io/vishnu4reddy/testing_project/$COMMIT_SHA:latest  # Pull the Docker image based on the commit SHA

      - name: Verify Docker Image
        run: |
            # Check if the Docker image was successfully pulled
            docker images ghcr.io/vishnu4reddy/testing_project/$COMMIT_SHA:latest || exit 1
            echo "Docker image pulled successfully"


          
      # - name: Run Docker Container
      #   run: |
      #     IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$(basename ${GITHUB_REPOSITORY}):latest"
          
      #     # Run the Docker container
      #     docker run $IMAGE_NAME




  # Docker Image Pull
  # docker_image_pull:
  #   needs: trigger_testing_vishnu
  #   runs-on: ubuntu-latest
  #   name: Pull Docker Image
  #   steps:
  #     - name: Pull Docker Image
  #       run: |
  #         docker pull ${{ env.image_registry }}/${{ env.image_name }}:${{ github.sha }}

  # # Generate the components list dynamically based on input
  # set_components:
  #   needs: docker_image_pull
  #   runs-on: ubuntu-latest
  #   outputs:
  #     components: ${{ steps.set_components.outputs.components }}
  #   steps:
  #     - name: Set the Components List
  #       id: set_components
  #       run: |
  #         if [ "${{ github.event.inputs.test_component }}" == "all" ]; then
  #           echo "components=acct_mgmt,authz,notifications,support_assistent,ups,unified,sam" >> $GITHUB_ENV
  #         else
  #           echo "components=${{ github.event.inputs.test_component }}" >> $GITHUB_ENV
  #         fi

  # # Run Tests for Each Component Dynamically Based on the Set Components
  # run_tests:
  #   needs: [docker_image_pull, set_components]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       component: ${{ fromJson(env.components) }}
  #   name: Run Tests for ${{ matrix.component }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v2

  #     - name: Run Tests for ${{ matrix.component }}
  #       run: |
  #         COMPONENT_PATH="path/to/${{ matrix.component }}"
  #         docker run --rm \
  #           -e ENVIRONMENT=${{ github.event.inputs.environment }} \
  #           -e TEST_COMPONENT="${{ matrix.component }}" \
  #           -e MARKER=${{ github.event.inputs.marker }} \
  #           -e COMPONENT_PATH="${COMPONENT_PATH}" \
  #           ${{ env.image_registry }}/${{ env.image_name }}:${{ github.sha }} \
  #           pytest --path "${COMPONENT_PATH}" --marker ${{ github.event.inputs.marker }} --component "${{ matrix.component }}" --env ${{ github.event.inputs.environment }} --alluredir=/allure-results

  #     - name: Generate Allure Report for ${{ matrix.component }}
  #       run: |
  #         docker run --rm \
  #           -v $(pwd)/allure-results:/allure-results \
  #           -v $(pwd)/allure-report:/allure-report \
  #           allureio/allure-cli generate /allure-results --clean -o /allure-report

  #     - name: Upload Allure Report for ${{ matrix.component }}
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: allure-report-${{ matrix.component }}
  #         path: allure-report

  # # Send Email Notification (Once All Tests Are Completed)
  # send_email_notification:
  #   needs: run_tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Send email notification
  #       run: |
  #         STATUS="Success"
  #         if [[ ${{ job.status }} != 'success' ]]; then
  #           STATUS="Failure"
  #         fi

  #         SUBJECT="Test Automation Results: ${{ github.event.inputs.test_component }} - $STATUS"
  #         BODY="Test results for component: ${{ github.event.inputs.test_component }} have finished. Status: $STATUS."
          
  #         # Send email using msmtp (configure SMTP with GitHub Secrets)
  #         echo -e "Subject:${SUBJECT}\n${BODY}" | msmtp --from=${{ secrets.EMAIL_USERNAME }} --auth=on --user=${{ secrets.EMAIL_USERNAME }} --passwordeval=echo ${{ secrets.EMAIL_PASSWORD }} --host=smtp.gmail.com --port=587 ${{ secrets.TO_EMAIL }}
